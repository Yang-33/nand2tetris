// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int current_size;
    field int allocated_size;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0){
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let current_size = 0;
        let allocated_size = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return ;
    }

    /** Returns the current length of this string. */
    method int length() {
        return current_size;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return ;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(current_size < allocated_size){
            let str[current_size] = c;
            let current_size = current_size + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(current_size > 0){
            let current_size = current_size - 1;
        }
        return ;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int ans, i;
        var boolean is_negative;

        let ans = 0;

        // negative?
        if((current_size > 0) & (str[0] = 45)){
            let i = 1;
            let is_negative = true;
        }else {
            let i = 0;
            let is_negative = false;
        }

        while((i < current_size)){
            let ans = (10 * ans) + str[i] - 48;
            let i = i + 1;
        }

        if(is_negative){
            return -ans;
        }else {
            return ans;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int left, tail, c;

        let current_size = 0;
        if(val < 0){
            do appendChar(45);
            let val = -val;
        }
        let left = val / 10;
        let tail = val - (left * 10);
        let c = tail + 48;
        if(left > 0){
            do setInt(left);
            do appendChar(c);
        }else{
            do appendChar(c);
        }
        return ;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
