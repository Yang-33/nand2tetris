<class>
  <keyword> class </keyword>
  <identifier> Main </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> int </keyword>
    <identifier> TOP </identifier>
    <symbol> , </symbol>
    <identifier> LEFT </identifier>
    <symbol> , </symbol>
    <identifier> H </identifier>
    <symbol> , </symbol>
    <identifier> W </identifier>
    <symbol> , </symbol>
    <identifier> BLOCK </identifier>
    <symbol> , </symbol>
    <identifier> rand </identifier>
    <symbol> , </symbol>
    <identifier> speed </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> static </keyword>
    <identifier> Array </identifier>
    <identifier> ss_bg </identifier>
    <symbol> , </symbol>
    <identifier> ss_buf </identifier>
    <symbol> , </symbol>
    <identifier> ss_now </identifier>
    <symbol> , </symbol>
    <identifier> ss_try </identifier>
    <symbol> , </symbol>
    <identifier> ss_next </identifier>
    <symbol> , </symbol>
    <identifier> ss_tmp </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> static </keyword>
    <identifier> Array </identifier>
    <identifier> sss_blocks </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> main </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> TOP </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> LEFT </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 26 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> H </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 22 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> W </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 12 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> BLOCK </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 4 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> speed </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 150 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> ss_buf </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> createField </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> ss_bg </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> createField </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sss_blocks </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> createBlocks </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> ss_now </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> createEmptyBlock </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> ss_try </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> createEmptyBlock </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> ss_next </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> createEmptyBlock </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> ss_tmp </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> createEmptyBlock </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 1 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> println </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant>  CONTROLS: </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> println </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant>    Left key: move left </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> println </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant>    Right key: move right </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> println </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant>    Z key: rotate left </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> println </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant>    X key: rotate right </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> println </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant>    Down key: drop </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 1 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 40 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> print </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant> Level:  </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 2 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 40 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> print </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant> Score:  </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 6 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 40 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> print </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant> Next:  </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> setNext </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> copyBlock </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_next </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> ss_now </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> setNext </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> loop </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> loop </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> boolean </keyword>
        <identifier> is_update </identifier>
        <symbol> , </symbol>
        <identifier> is_collided </identifier>
        <symbol> , </symbol>
        <identifier> is_over </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> time </identifier>
        <symbol> , </symbol>
        <identifier> time_k </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> zero </identifier>
        <symbol> , </symbol>
        <identifier> x </identifier>
        <symbol> , </symbol>
        <identifier> y </identifier>
        <symbol> , </symbol>
        <identifier> key </identifier>
        <symbol> , </symbol>
        <identifier> key_prev </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> level </identifier>
        <symbol> , </symbol>
        <identifier> score </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> zero </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> is_update </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <keyword> true </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> y </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <keyword> true </keyword>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> time </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 0 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> key </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> zero </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 24576 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> key </identifier>
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <integerConstant> 0 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> key_prev </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> key </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                          <integerConstant> 130 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <ifStatement>
                          <keyword> if </keyword>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <symbol> ~ </symbol>
                              <term>
                                <symbol> ( </symbol>
                                <expression>
                                  <term>
                                    <identifier> key_prev </identifier>
                                  </term>
                                  <symbol> = </symbol>
                                  <term>
                                    <integerConstant> 130 </integerConstant>
                                  </term>
                                </expression>
                                <symbol> ) </symbol>
                              </term>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                          <symbol> { </symbol>
                          <statements>
                            <ifStatement>
                              <keyword> if </keyword>
                              <symbol> ( </symbol>
                              <expression>
                                <term>
                                  <symbol> ~ </symbol>
                                  <term>
                                    <identifier> Main </identifier>
                                    <symbol> . </symbol>
                                    <identifier> mergeField </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                      <expression>
                                        <term>
                                          <identifier> ss_bg </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> H </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> ss_now </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> BLOCK </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> y </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> x </identifier>
                                        </term>
                                        <symbol> - </symbol>
                                        <term>
                                          <integerConstant> 1 </integerConstant>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <keyword> true </keyword>
                                        </term>
                                      </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                  </term>
                                </term>
                              </expression>
                              <symbol> ) </symbol>
                              <symbol> { </symbol>
                              <statements>
                                <letStatement>
                                  <keyword> let </keyword>
                                  <identifier> x </identifier>
                                  <symbol> = </symbol>
                                  <expression>
                                    <term>
                                      <identifier> x </identifier>
                                    </term>
                                    <symbol> - </symbol>
                                    <term>
                                      <integerConstant> 1 </integerConstant>
                                    </term>
                                  </expression>
                                  <symbol> ; </symbol>
                                </letStatement>
                              </statements>
                              <symbol> } </symbol>
                            </ifStatement>
                            <letStatement>
                              <keyword> let </keyword>
                              <identifier> is_update </identifier>
                              <symbol> = </symbol>
                              <expression>
                                <term>
                                  <keyword> true </keyword>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </letStatement>
                            <letStatement>
                              <keyword> let </keyword>
                              <identifier> key_prev </identifier>
                              <symbol> = </symbol>
                              <expression>
                                <term>
                                  <integerConstant> 130 </integerConstant>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </letStatement>
                          </statements>
                          <symbol> } </symbol>
                        </ifStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> key </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                          <integerConstant> 132 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <ifStatement>
                          <keyword> if </keyword>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <symbol> ~ </symbol>
                              <term>
                                <symbol> ( </symbol>
                                <expression>
                                  <term>
                                    <identifier> key_prev </identifier>
                                  </term>
                                  <symbol> = </symbol>
                                  <term>
                                    <integerConstant> 132 </integerConstant>
                                  </term>
                                </expression>
                                <symbol> ) </symbol>
                              </term>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                          <symbol> { </symbol>
                          <statements>
                            <ifStatement>
                              <keyword> if </keyword>
                              <symbol> ( </symbol>
                              <expression>
                                <term>
                                  <symbol> ~ </symbol>
                                  <term>
                                    <identifier> Main </identifier>
                                    <symbol> . </symbol>
                                    <identifier> mergeField </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                      <expression>
                                        <term>
                                          <identifier> ss_bg </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> H </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> ss_now </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> BLOCK </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> y </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> x </identifier>
                                        </term>
                                        <symbol> + </symbol>
                                        <term>
                                          <integerConstant> 1 </integerConstant>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <keyword> true </keyword>
                                        </term>
                                      </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                  </term>
                                </term>
                              </expression>
                              <symbol> ) </symbol>
                              <symbol> { </symbol>
                              <statements>
                                <letStatement>
                                  <keyword> let </keyword>
                                  <identifier> x </identifier>
                                  <symbol> = </symbol>
                                  <expression>
                                    <term>
                                      <identifier> x </identifier>
                                    </term>
                                    <symbol> + </symbol>
                                    <term>
                                      <integerConstant> 1 </integerConstant>
                                    </term>
                                  </expression>
                                  <symbol> ; </symbol>
                                </letStatement>
                              </statements>
                              <symbol> } </symbol>
                            </ifStatement>
                            <letStatement>
                              <keyword> let </keyword>
                              <identifier> is_update </identifier>
                              <symbol> = </symbol>
                              <expression>
                                <term>
                                  <keyword> true </keyword>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </letStatement>
                            <letStatement>
                              <keyword> let </keyword>
                              <identifier> key_prev </identifier>
                              <symbol> = </symbol>
                              <expression>
                                <term>
                                  <integerConstant> 132 </integerConstant>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </letStatement>
                          </statements>
                          <symbol> } </symbol>
                        </ifStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> key </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                          <integerConstant> 90 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <ifStatement>
                          <keyword> if </keyword>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <symbol> ~ </symbol>
                              <term>
                                <symbol> ( </symbol>
                                <expression>
                                  <term>
                                    <identifier> key_prev </identifier>
                                  </term>
                                  <symbol> = </symbol>
                                  <term>
                                    <integerConstant> 90 </integerConstant>
                                  </term>
                                </expression>
                                <symbol> ) </symbol>
                              </term>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                          <symbol> { </symbol>
                          <statements>
                            <doStatement>
                              <keyword> do </keyword>
                              <identifier> Main </identifier>
                              <symbol> . </symbol>
                              <identifier> copyBlock </identifier>
                              <symbol> ( </symbol>
                              <expressionList>
                                <expression>
                                  <term>
                                    <identifier> ss_now </identifier>
                                  </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                  <term>
                                    <identifier> ss_try </identifier>
                                  </term>
                                </expression>
                              </expressionList>
                              <symbol> ) </symbol>
                              <symbol> ; </symbol>
                            </doStatement>
                            <doStatement>
                              <keyword> do </keyword>
                              <identifier> Main </identifier>
                              <symbol> . </symbol>
                              <identifier> rotateLeft </identifier>
                              <symbol> ( </symbol>
                              <expressionList>
                                <expression>
                                  <term>
                                    <identifier> ss_try </identifier>
                                  </term>
                                </expression>
                              </expressionList>
                              <symbol> ) </symbol>
                              <symbol> ; </symbol>
                            </doStatement>
                            <ifStatement>
                              <keyword> if </keyword>
                              <symbol> ( </symbol>
                              <expression>
                                <term>
                                  <symbol> ~ </symbol>
                                  <term>
                                    <identifier> Main </identifier>
                                    <symbol> . </symbol>
                                    <identifier> mergeField </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                      <expression>
                                        <term>
                                          <identifier> ss_bg </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> H </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> ss_try </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> BLOCK </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> y </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> x </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <keyword> true </keyword>
                                        </term>
                                      </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                  </term>
                                </term>
                              </expression>
                              <symbol> ) </symbol>
                              <symbol> { </symbol>
                              <statements>
                                <doStatement>
                                  <keyword> do </keyword>
                                  <identifier> Main </identifier>
                                  <symbol> . </symbol>
                                  <identifier> copyBlock </identifier>
                                  <symbol> ( </symbol>
                                  <expressionList>
                                    <expression>
                                      <term>
                                        <identifier> ss_try </identifier>
                                      </term>
                                    </expression>
                                    <symbol> , </symbol>
                                    <expression>
                                      <term>
                                        <identifier> ss_now </identifier>
                                      </term>
                                    </expression>
                                  </expressionList>
                                  <symbol> ) </symbol>
                                  <symbol> ; </symbol>
                                </doStatement>
                              </statements>
                              <symbol> } </symbol>
                            </ifStatement>
                            <letStatement>
                              <keyword> let </keyword>
                              <identifier> is_update </identifier>
                              <symbol> = </symbol>
                              <expression>
                                <term>
                                  <keyword> true </keyword>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </letStatement>
                            <letStatement>
                              <keyword> let </keyword>
                              <identifier> key_prev </identifier>
                              <symbol> = </symbol>
                              <expression>
                                <term>
                                  <integerConstant> 90 </integerConstant>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </letStatement>
                          </statements>
                          <symbol> } </symbol>
                        </ifStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> key </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                          <integerConstant> 88 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <ifStatement>
                          <keyword> if </keyword>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <symbol> ~ </symbol>
                              <term>
                                <symbol> ( </symbol>
                                <expression>
                                  <term>
                                    <identifier> key_prev </identifier>
                                  </term>
                                  <symbol> = </symbol>
                                  <term>
                                    <integerConstant> 88 </integerConstant>
                                  </term>
                                </expression>
                                <symbol> ) </symbol>
                              </term>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                          <symbol> { </symbol>
                          <statements>
                            <doStatement>
                              <keyword> do </keyword>
                              <identifier> Main </identifier>
                              <symbol> . </symbol>
                              <identifier> copyBlock </identifier>
                              <symbol> ( </symbol>
                              <expressionList>
                                <expression>
                                  <term>
                                    <identifier> ss_now </identifier>
                                  </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                  <term>
                                    <identifier> ss_try </identifier>
                                  </term>
                                </expression>
                              </expressionList>
                              <symbol> ) </symbol>
                              <symbol> ; </symbol>
                            </doStatement>
                            <doStatement>
                              <keyword> do </keyword>
                              <identifier> Main </identifier>
                              <symbol> . </symbol>
                              <identifier> rotateRight </identifier>
                              <symbol> ( </symbol>
                              <expressionList>
                                <expression>
                                  <term>
                                    <identifier> ss_try </identifier>
                                  </term>
                                </expression>
                              </expressionList>
                              <symbol> ) </symbol>
                              <symbol> ; </symbol>
                            </doStatement>
                            <ifStatement>
                              <keyword> if </keyword>
                              <symbol> ( </symbol>
                              <expression>
                                <term>
                                  <symbol> ~ </symbol>
                                  <term>
                                    <identifier> Main </identifier>
                                    <symbol> . </symbol>
                                    <identifier> mergeField </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                      <expression>
                                        <term>
                                          <identifier> ss_bg </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> H </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> ss_try </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> BLOCK </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> y </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> x </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <keyword> true </keyword>
                                        </term>
                                      </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                  </term>
                                </term>
                              </expression>
                              <symbol> ) </symbol>
                              <symbol> { </symbol>
                              <statements>
                                <doStatement>
                                  <keyword> do </keyword>
                                  <identifier> Main </identifier>
                                  <symbol> . </symbol>
                                  <identifier> copyBlock </identifier>
                                  <symbol> ( </symbol>
                                  <expressionList>
                                    <expression>
                                      <term>
                                        <identifier> ss_try </identifier>
                                      </term>
                                    </expression>
                                    <symbol> , </symbol>
                                    <expression>
                                      <term>
                                        <identifier> ss_now </identifier>
                                      </term>
                                    </expression>
                                  </expressionList>
                                  <symbol> ) </symbol>
                                  <symbol> ; </symbol>
                                </doStatement>
                              </statements>
                              <symbol> } </symbol>
                            </ifStatement>
                            <letStatement>
                              <keyword> let </keyword>
                              <identifier> is_update </identifier>
                              <symbol> = </symbol>
                              <expression>
                                <term>
                                  <keyword> true </keyword>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </letStatement>
                            <letStatement>
                              <keyword> let </keyword>
                              <identifier> key_prev </identifier>
                              <symbol> = </symbol>
                              <expression>
                                <term>
                                  <integerConstant> 88 </integerConstant>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </letStatement>
                          </statements>
                          <symbol> } </symbol>
                        </ifStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> key </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                          <integerConstant> 133 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <ifStatement>
                          <keyword> if </keyword>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <symbol> ~ </symbol>
                              <term>
                                <symbol> ( </symbol>
                                <expression>
                                  <term>
                                    <identifier> key_prev </identifier>
                                  </term>
                                  <symbol> = </symbol>
                                  <term>
                                    <integerConstant> 133 </integerConstant>
                                  </term>
                                </expression>
                                <symbol> ) </symbol>
                              </term>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                          <symbol> { </symbol>
                          <statements>
                            <whileStatement>
                              <keyword> while </keyword>
                              <symbol> ( </symbol>
                              <expression>
                                <term>
                                  <symbol> ~ </symbol>
                                  <term>
                                    <identifier> Main </identifier>
                                    <symbol> . </symbol>
                                    <identifier> mergeField </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                      <expression>
                                        <term>
                                          <identifier> ss_bg </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> H </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> ss_now </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> BLOCK </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> y </identifier>
                                        </term>
                                        <symbol> + </symbol>
                                        <term>
                                          <integerConstant> 1 </integerConstant>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <identifier> x </identifier>
                                        </term>
                                      </expression>
                                      <symbol> , </symbol>
                                      <expression>
                                        <term>
                                          <keyword> true </keyword>
                                        </term>
                                      </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                  </term>
                                </term>
                              </expression>
                              <symbol> ) </symbol>
                              <symbol> { </symbol>
                              <statements>
                                <letStatement>
                                  <keyword> let </keyword>
                                  <identifier> y </identifier>
                                  <symbol> = </symbol>
                                  <expression>
                                    <term>
                                      <identifier> y </identifier>
                                    </term>
                                    <symbol> + </symbol>
                                    <term>
                                      <integerConstant> 1 </integerConstant>
                                    </term>
                                  </expression>
                                  <symbol> ; </symbol>
                                </letStatement>
                                <letStatement>
                                  <keyword> let </keyword>
                                  <identifier> time_k </identifier>
                                  <symbol> = </symbol>
                                  <expression>
                                    <term>
                                      <integerConstant> 0 </integerConstant>
                                    </term>
                                  </expression>
                                  <symbol> ; </symbol>
                                </letStatement>
                              </statements>
                              <symbol> } </symbol>
                            </whileStatement>
                            <letStatement>
                              <keyword> let </keyword>
                              <identifier> is_update </identifier>
                              <symbol> = </symbol>
                              <expression>
                                <term>
                                  <keyword> true </keyword>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </letStatement>
                            <letStatement>
                              <keyword> let </keyword>
                              <identifier> key_prev </identifier>
                              <symbol> = </symbol>
                              <expression>
                                <term>
                                  <integerConstant> 133 </integerConstant>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </letStatement>
                          </statements>
                          <symbol> } </symbol>
                        </ifStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> Main </identifier>
                      <symbol> . </symbol>
                      <identifier> modulo </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> time_k </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> speed </identifier>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> speed </identifier>
                        </term>
                        <symbol> - </symbol>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> Main </identifier>
                          <symbol> . </symbol>
                          <identifier> mergeField </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                            <expression>
                              <term>
                                <identifier> ss_bg </identifier>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> H </identifier>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> ss_now </identifier>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> BLOCK </identifier>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> y </identifier>
                              </term>
                              <symbol> + </symbol>
                              <term>
                                <integerConstant> 1 </integerConstant>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> x </identifier>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <keyword> true </keyword>
                              </term>
                            </expression>
                          </expressionList>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <doStatement>
                          <keyword> do </keyword>
                          <identifier> Main </identifier>
                          <symbol> . </symbol>
                          <identifier> mergeField </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                            <expression>
                              <term>
                                <identifier> ss_bg </identifier>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> H </identifier>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> ss_now </identifier>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> BLOCK </identifier>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> y </identifier>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> x </identifier>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <keyword> false </keyword>
                              </term>
                            </expression>
                          </expressionList>
                          <symbol> ) </symbol>
                          <symbol> ; </symbol>
                        </doStatement>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> x </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <integerConstant> 0 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> y </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <integerConstant> 1 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> score </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <identifier> score </identifier>
                            </term>
                            <symbol> + </symbol>
                            <term>
                              <identifier> Main </identifier>
                              <symbol> . </symbol>
                              <identifier> updateLines </identifier>
                              <symbol> ( </symbol>
                              <expressionList>
                              </expressionList>
                              <symbol> ) </symbol>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                        <ifStatement>
                          <keyword> if </keyword>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <symbol> ~ </symbol>
                              <term>
                                <symbol> ( </symbol>
                                <expression>
                                  <term>
                                    <identifier> level </identifier>
                                  </term>
                                  <symbol> = </symbol>
                                  <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                      <term>
                                        <identifier> score </identifier>
                                      </term>
                                      <symbol> / </symbol>
                                      <term>
                                        <integerConstant> 3 </integerConstant>
                                      </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                  </term>
                                </expression>
                                <symbol> ) </symbol>
                              </term>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                          <symbol> { </symbol>
                          <statements>
                            <letStatement>
                              <keyword> let </keyword>
                              <identifier> speed </identifier>
                              <symbol> = </symbol>
                              <expression>
                                <term>
                                  <symbol> ( </symbol>
                                  <expression>
                                    <term>
                                      <identifier> speed </identifier>
                                    </term>
                                    <symbol> * </symbol>
                                    <term>
                                      <integerConstant> 9 </integerConstant>
                                    </term>
                                  </expression>
                                  <symbol> ) </symbol>
                                </term>
                                <symbol> / </symbol>
                                <term>
                                  <integerConstant> 10 </integerConstant>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </letStatement>
                          </statements>
                          <symbol> } </symbol>
                        </ifStatement>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> level </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <identifier> score </identifier>
                            </term>
                            <symbol> / </symbol>
                            <term>
                              <integerConstant> 3 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> time_k </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <integerConstant> 0 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                        <doStatement>
                          <keyword> do </keyword>
                          <identifier> Main </identifier>
                          <symbol> . </symbol>
                          <identifier> copyBlock </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                            <expression>
                              <term>
                                <identifier> ss_next </identifier>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> ss_now </identifier>
                              </term>
                            </expression>
                          </expressionList>
                          <symbol> ) </symbol>
                          <symbol> ; </symbol>
                        </doStatement>
                        <ifStatement>
                          <keyword> if </keyword>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> Main </identifier>
                              <symbol> . </symbol>
                              <identifier> mergeField </identifier>
                              <symbol> ( </symbol>
                              <expressionList>
                                <expression>
                                  <term>
                                    <identifier> ss_bg </identifier>
                                  </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                  <term>
                                    <identifier> H </identifier>
                                  </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                  <term>
                                    <identifier> ss_now </identifier>
                                  </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                  <term>
                                    <identifier> BLOCK </identifier>
                                  </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                  <term>
                                    <identifier> y </identifier>
                                  </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                  <term>
                                    <identifier> x </identifier>
                                  </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                  <term>
                                    <keyword> true </keyword>
                                  </term>
                                </expression>
                              </expressionList>
                              <symbol> ) </symbol>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                          <symbol> { </symbol>
                          <statements>
                            <letStatement>
                              <keyword> let </keyword>
                              <identifier> is_over </identifier>
                              <symbol> = </symbol>
                              <expression>
                                <term>
                                  <keyword> true </keyword>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </letStatement>
                            <doStatement>
                              <keyword> do </keyword>
                              <identifier> Output </identifier>
                              <symbol> . </symbol>
                              <identifier> moveCursor </identifier>
                              <symbol> ( </symbol>
                              <expressionList>
                                <expression>
                                  <term>
                                    <integerConstant> 0 </integerConstant>
                                  </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                  <term>
                                    <integerConstant> 27 </integerConstant>
                                  </term>
                                </expression>
                              </expressionList>
                              <symbol> ) </symbol>
                              <symbol> ; </symbol>
                            </doStatement>
                            <doStatement>
                              <keyword> do </keyword>
                              <identifier> Output </identifier>
                              <symbol> . </symbol>
                              <identifier> printString </identifier>
                              <symbol> ( </symbol>
                              <expressionList>
                                <expression>
                                  <term>
                                    <stringConstant> GAME  OVER </stringConstant>
                                  </term>
                                </expression>
                              </expressionList>
                              <symbol> ) </symbol>
                              <symbol> ; </symbol>
                            </doStatement>
                          </statements>
                          <symbol> } </symbol>
                          <keyword> else </keyword>
                          <symbol> { </symbol>
                          <statements>
                            <doStatement>
                              <keyword> do </keyword>
                              <identifier> Main </identifier>
                              <symbol> . </symbol>
                              <identifier> setNext </identifier>
                              <symbol> ( </symbol>
                              <expressionList>
                              </expressionList>
                              <symbol> ) </symbol>
                              <symbol> ; </symbol>
                            </doStatement>
                          </statements>
                          <symbol> } </symbol>
                        </ifStatement>
                      </statements>
                      <symbol> } </symbol>
                      <keyword> else </keyword>
                      <symbol> { </symbol>
                      <statements>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> y </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <identifier> y </identifier>
                            </term>
                            <symbol> + </symbol>
                            <term>
                              <integerConstant> 1 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> is_update </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <keyword> true </keyword>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> is_update </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> Main </identifier>
                      <symbol> . </symbol>
                      <identifier> clearField </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> ss_buf </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> H </identifier>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> Main </identifier>
                      <symbol> . </symbol>
                      <identifier> mergeField </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> ss_buf </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> H </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> ss_bg </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> H </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <integerConstant> 0 </integerConstant>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <integerConstant> 0 </integerConstant>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <keyword> false </keyword>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> Main </identifier>
                      <symbol> . </symbol>
                      <identifier> mergeField </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> ss_buf </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> H </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> ss_now </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> BLOCK </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> y </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> x </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <keyword> false </keyword>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> Main </identifier>
                      <symbol> . </symbol>
                      <identifier> printStrings </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> TOP </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> LEFT </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> ss_buf </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> H </identifier>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> Output </identifier>
                      <symbol> . </symbol>
                      <identifier> moveCursor </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <integerConstant> 1 </integerConstant>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <integerConstant> 47 </integerConstant>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> Output </identifier>
                      <symbol> . </symbol>
                      <identifier> printInt </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> level </identifier>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> Output </identifier>
                      <symbol> . </symbol>
                      <identifier> moveCursor </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <integerConstant> 2 </integerConstant>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <integerConstant> 47 </integerConstant>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> Output </identifier>
                      <symbol> . </symbol>
                      <identifier> printInt </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> score </identifier>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <whileStatement>
                      <keyword> while </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> is_over </identifier>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                      </statements>
                      <symbol> } </symbol>
                    </whileStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> is_update </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <keyword> false </keyword>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> time </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> time </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> time </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 1000 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> time_k </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> time_k </identifier>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> time </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 0 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> time_k </identifier>
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <integerConstant> 1000 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> time_k </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> modulo </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> y </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> x </identifier>
            </term>
            <symbol> - </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> x </identifier>
                    </term>
                    <symbol> / </symbol>
                    <term>
                      <identifier> y </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> * </symbol>
                <term>
                  <identifier> y </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> random </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> rand </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> rand </identifier>
                </term>
                <symbol> * </symbol>
                <term>
                  <integerConstant> 12343 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> + </symbol>
            <term>
              <integerConstant> 12347 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> rand </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> randomInt </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> n </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> Math </identifier>
              <symbol> . </symbol>
              <identifier> abs </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> Main </identifier>
                    <symbol> . </symbol>
                    <identifier> modulo </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                      <expression>
                        <term>
                          <identifier> Main </identifier>
                          <symbol> . </symbol>
                          <identifier> random </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                          </expressionList>
                          <symbol> ) </symbol>
                        </term>
                        <symbol> / </symbol>
                        <term>
                          <integerConstant> 10 </integerConstant>
                        </term>
                      </expression>
                      <symbol> , </symbol>
                      <expression>
                        <term>
                          <identifier> n </identifier>
                        </term>
                      </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> setNext </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> copyBlock </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> sss_blocks </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <identifier> Main </identifier>
                    <symbol> . </symbol>
                    <identifier> randomInt </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                      <expression>
                        <term>
                          <integerConstant> 7 </integerConstant>
                        </term>
                      </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> ss_next </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> i </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> randomInt </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 4 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> rotateLeft </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> ss_next </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> i </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> printStrings </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 8 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 43 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> ss_next </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 4 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> testRandom </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <integerConstant> 100 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> printInt </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> Main </identifier>
                    <symbol> . </symbol>
                    <identifier> randomInt </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                      <expression>
                        <term>
                          <integerConstant> 10 </integerConstant>
                        </term>
                      </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> printString </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant> ,  </stringConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> i </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> fillString </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <identifier> String </identifier>
      <identifier> s </identifier>
      <symbol> , </symbol>
      <keyword> char </keyword>
      <identifier> c </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> , </symbol>
        <identifier> len </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> len </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> s </identifier>
              <symbol> . </symbol>
              <identifier> length </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <identifier> len </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> s </identifier>
              <symbol> . </symbol>
              <identifier> setCharAt </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> i </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> c </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> i </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> print </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <identifier> String </identifier>
      <identifier> s </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> s </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> s </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> println </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <identifier> String </identifier>
      <identifier> s </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> print </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> s </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> println </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> clearField </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <identifier> Array </identifier>
      <identifier> ss </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> len </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <identifier> len </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> fillString </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> ss </identifier>
                    <symbol> [ </symbol>
                    <expression>
                      <term>
                        <identifier> i </identifier>
                      </term>
                    </expression>
                    <symbol> ] </symbol>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 32 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> i </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> boolean </keyword>
    <identifier> mergeField </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <identifier> Array </identifier>
      <identifier> ss1 </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> len1 </identifier>
      <symbol> , </symbol>
      <identifier> Array </identifier>
      <identifier> ss2 </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> len2 </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> row </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> col </identifier>
      <symbol> , </symbol>
      <keyword> boolean </keyword>
      <identifier> is_try </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> char </keyword>
        <identifier> ch </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> r </identifier>
        <symbol> , </symbol>
        <identifier> c </identifier>
        <symbol> , </symbol>
        <identifier> len_s2 </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <identifier> String </identifier>
        <identifier> s1 </identifier>
        <symbol> , </symbol>
        <identifier> s2 </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> r </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <identifier> len2 </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> s1 </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> ss1 </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <identifier> row </identifier>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <identifier> r </identifier>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> s2 </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> ss2 </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <identifier> r </identifier>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> len_s2 </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> s2 </identifier>
                  <symbol> . </symbol>
                  <identifier> length </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> c </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 0 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <whileStatement>
              <keyword> while </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> c </identifier>
                </term>
                <symbol> &lt; </symbol>
                <term>
                  <identifier> len_s2 </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> ch </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> s2 </identifier>
                      <symbol> . </symbol>
                      <identifier> charAt </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> c </identifier>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <symbol> ( </symbol>
                        <expression>
                          <term>
                            <identifier> ch </identifier>
                          </term>
                          <symbol> = </symbol>
                          <term>
                            <integerConstant> 32 </integerConstant>
                          </term>
                        </expression>
                        <symbol> ) </symbol>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> is_try </identifier>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <ifStatement>
                          <keyword> if </keyword>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <symbol> ( </symbol>
                              <expression>
                                <term>
                                  <identifier> col </identifier>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                  <identifier> c </identifier>
                                </term>
                              </expression>
                              <symbol> ) </symbol>
                            </term>
                            <symbol> &lt; </symbol>
                            <term>
                              <integerConstant> 0 </integerConstant>
                            </term>
                            <symbol> | </symbol>
                            <term>
                              <symbol> ( </symbol>
                              <expression>
                                <term>
                                  <identifier> col </identifier>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                  <identifier> c </identifier>
                                </term>
                              </expression>
                              <symbol> ) </symbol>
                            </term>
                            <symbol> &gt; </symbol>
                            <term>
                              <integerConstant> 11 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                          <symbol> { </symbol>
                          <statements>
                            <returnStatement>
                              <keyword> return </keyword>
                              <expression>
                                <term>
                                  <keyword> true </keyword>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </returnStatement>
                          </statements>
                          <symbol> } </symbol>
                        </ifStatement>
                        <ifStatement>
                          <keyword> if </keyword>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <symbol> ~ </symbol>
                              <term>
                                <symbol> ( </symbol>
                                <expression>
                                  <term>
                                    <identifier> s1 </identifier>
                                    <symbol> . </symbol>
                                    <identifier> charAt </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                      <expression>
                                        <term>
                                          <identifier> col </identifier>
                                        </term>
                                        <symbol> + </symbol>
                                        <term>
                                          <identifier> c </identifier>
                                        </term>
                                      </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                  </term>
                                  <symbol> = </symbol>
                                  <term>
                                    <integerConstant> 32 </integerConstant>
                                  </term>
                                </expression>
                                <symbol> ) </symbol>
                              </term>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                          <symbol> { </symbol>
                          <statements>
                            <returnStatement>
                              <keyword> return </keyword>
                              <expression>
                                <term>
                                  <keyword> true </keyword>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </returnStatement>
                          </statements>
                          <symbol> } </symbol>
                        </ifStatement>
                      </statements>
                      <symbol> } </symbol>
                      <keyword> else </keyword>
                      <symbol> { </symbol>
                      <statements>
                        <doStatement>
                          <keyword> do </keyword>
                          <identifier> s1 </identifier>
                          <symbol> . </symbol>
                          <identifier> setCharAt </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                            <expression>
                              <term>
                                <identifier> col </identifier>
                              </term>
                              <symbol> + </symbol>
                              <term>
                                <identifier> c </identifier>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> ch </identifier>
                              </term>
                            </expression>
                          </expressionList>
                          <symbol> ) </symbol>
                          <symbol> ; </symbol>
                        </doStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> c </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> c </identifier>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </whileStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> r </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> r </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> false </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> printStrings </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> row </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> col </identifier>
      <symbol> , </symbol>
      <identifier> Array </identifier>
      <identifier> ss </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> len </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <identifier> len </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> moveCursor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> row </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> i </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> col </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> printString </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> ss </identifier>
                    <symbol> [ </symbol>
                    <expression>
                      <term>
                        <identifier> i </identifier>
                      </term>
                    </expression>
                    <symbol> ] </symbol>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> i </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <identifier> Array </identifier>
    <identifier> createField </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier> Array </identifier>
        <identifier> a </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> a </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Array </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> H </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <identifier> H </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> a </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
              </expression>
              <symbol> ] </symbol>
              <symbol> = </symbol>
              <expression>
                <term>
                  <stringConstant> #          # </stringConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> i </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> fillString </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> a </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 35 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> fillString </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> a </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <identifier> H </identifier>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 35 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> a </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <identifier> Array </identifier>
    <identifier> createBlock </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <identifier> String </identifier>
      <identifier> s0 </identifier>
      <symbol> , </symbol>
      <identifier> String </identifier>
      <identifier> s1 </identifier>
      <symbol> , </symbol>
      <identifier> String </identifier>
      <identifier> s2 </identifier>
      <symbol> , </symbol>
      <identifier> String </identifier>
      <identifier> s3 </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier> Array </identifier>
        <identifier> ss </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> ss </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Array </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 4 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> ss </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> s0 </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> ss </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> s1 </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> ss </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> s2 </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> ss </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 3 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> s3 </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> ss </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <identifier> Array </identifier>
    <identifier> createEmptyBlock </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> createBlock </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant>              </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>              </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>              </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>              </stringConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <identifier> Array </identifier>
    <identifier> createBlocks </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier> Array </identifier>
        <identifier> sss </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sss </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Array </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 7 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sss </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> createBlock </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant>       #      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>       #      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>       #      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>       #      </stringConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sss </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> createBlock </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant>       #      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>       #      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>      ##      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>              </stringConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sss </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> createBlock </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant>      #       </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>      #       </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>      ##      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>              </stringConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sss </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 3 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> createBlock </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant>       #      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>      ##      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>      #       </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>              </stringConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sss </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 4 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> createBlock </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant>      #       </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>      ##      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>       #      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>              </stringConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sss </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 5 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> createBlock </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant>       #      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>      ##      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>       #      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>              </stringConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sss </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 6 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Main </identifier>
              <symbol> . </symbol>
              <identifier> createBlock </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant>              </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>      ##      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>      ##      </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <stringConstant>              </stringConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> sss </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> copyBlock </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <identifier> Array </identifier>
      <identifier> a </identifier>
      <symbol> , </symbol>
      <identifier> Array </identifier>
      <identifier> b </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 4 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 6 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 6 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 7 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 7 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 4 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 6 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 6 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 7 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 7 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 4 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 2 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 2 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 6 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 2 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 6 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 7 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 2 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 7 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 3 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 4 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 3 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 3 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 3 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 3 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 6 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 3 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 6 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> b </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 3 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 7 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> a </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 3 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 7 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> rotateLeft </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <identifier> Array </identifier>
      <identifier> ss </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 4 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 7 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 7 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 6 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 2 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 7 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 7 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 3 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 7 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 4 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 6 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 6 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 6 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 2 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 6 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 7 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 3 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 6 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 4 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 6 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 2 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 7 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 3 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 3 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 4 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 3 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 3 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 6 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 2 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 3 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 7 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 3 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> copyBlock </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> ss </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> rotateRight </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <identifier> Array </identifier>
      <identifier> ss </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 4 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 3 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 2 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 6 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 7 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 4 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 3 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 2 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 6 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 7 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 4 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 3 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 6 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 2 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 6 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 6 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 6 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 7 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 6 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 3 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 4 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 3 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 7 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 3 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 2 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 7 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 3 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 6 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 7 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> setCharAt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <integerConstant> 3 </integerConstant>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 7 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> String </identifier>
                <symbol> . </symbol>
                <identifier> charAt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> ss </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> , </symbol>
                  <expression>
                    <term>
                      <integerConstant> 7 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>
          <symbol> . </symbol>
          <identifier> copyBlock </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_tmp </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> ss </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> boolean </keyword>
    <identifier> contains </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <identifier> String </identifier>
      <identifier> s </identifier>
      <symbol> , </symbol>
      <keyword> char </keyword>
      <identifier> c </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> , </symbol>
        <identifier> len </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> len </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> s </identifier>
              <symbol> . </symbol>
              <identifier> length </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <identifier> len </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> s </identifier>
                  <symbol> . </symbol>
                  <identifier> charAt </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <identifier> i </identifier>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
                <symbol> = </symbol>
                <term>
                  <identifier> c </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <returnStatement>
                  <keyword> return </keyword>
                  <expression>
                    <term>
                      <keyword> true </keyword>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </returnStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> i </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> false </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> eraseLine </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> n </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> String </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> ss_bg </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <identifier> n </identifier>
                  </term>
                </expression>
                <symbol> ] </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> n </identifier>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> ss_bg </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <identifier> n </identifier>
                </term>
              </expression>
              <symbol> ] </symbol>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> ss_bg </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <identifier> n </identifier>
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> n </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> n </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> ss_bg </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <stringConstant> #          # </stringConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> updateLines </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> , </symbol>
        <identifier> sum </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> i </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> H </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ~ </symbol>
                  <term>
                    <identifier> Main </identifier>
                    <symbol> . </symbol>
                    <identifier> contains </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                      <expression>
                        <term>
                          <identifier> ss_bg </identifier>
                          <symbol> [ </symbol>
                          <expression>
                            <term>
                              <identifier> i </identifier>
                            </term>
                          </expression>
                          <symbol> ] </symbol>
                        </term>
                      </expression>
                      <symbol> , </symbol>
                      <expression>
                        <term>
                          <integerConstant> 32 </integerConstant>
                        </term>
                      </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                  </term>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> Main </identifier>
                  <symbol> . </symbol>
                  <identifier> eraseLine </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <identifier> i </identifier>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> sum </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> sum </identifier>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> i </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> sum </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
